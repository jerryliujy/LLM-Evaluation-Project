[
  {
    "question": "如何在 Docker 中创建一个基本的镜像？",
    "answer": "要创建一个基本的 Docker 镜像，你需要编写一个 Dockerfile。基本步骤包括：\n1. 创建 Dockerfile 文件\n2. 选择基础镜像（FROM 指令）\n3. 添加应用代码（COPY 或 ADD 指令）\n4. 设置工作目录（WORKDIR 指令）\n5. 安装依赖（RUN 指令）\n6. 暴露端口（EXPOSE 指令）\n7. 设置启动命令（CMD 或 ENTRYPOINT 指令）",
    "question_type": "technical",
    "key_points": [
      "Dockerfile 是构建镜像的核心文件",
      "FROM 指令选择基础镜像",
      "COPY 指令用于复制文件到镜像",
      "RUN 指令执行命令安装依赖",
      "CMD 指令设置容器启动命令"
    ]
  },
  {
    "question": "什么是 Docker 容器？",
    "answer": "Docker 容器是一个轻量级、可移植的运行环境，它将应用程序及其依赖项打包在一起。容器共享主机操作系统的内核，但提供隔离的用户空间。容器具有以下特点：\n- 轻量级：比虚拟机占用更少资源\n- 可移植：可在任何支持 Docker 的系统上运行\n- 隔离：每个容器都有独立的文件系统、网络和进程空间\n- 一致性：确保应用在不同环境中的一致性",
    "question_type": "conceptual",
    "key_points": [
      "容器是轻量级的虚拟化技术",
      "容器共享主机内核",
      "提供应用程序隔离",
      "具有可移植性和一致性"
    ]
  },
  {
    "question": "如何优化 Docker 镜像大小？",
    "answer": "优化 Docker 镜像大小的最佳实践包括：\n1. 使用轻量级基础镜像（如 Alpine Linux）\n2. 合并 RUN 指令以减少层数\n3. 使用多阶段构建\n4. 删除不必要的文件和缓存\n5. 使用 .dockerignore 文件\n6. 避免安装推荐包\n7. 清理包管理器缓存",
    "question_type": "practical",
    "key_points": [
      "选择轻量级基础镜像",
      "合并命令减少镜像层",
      "使用多阶段构建",
      "清理缓存和临时文件",
      "使用 .dockerignore 排除文件"
    ]
  }
]
